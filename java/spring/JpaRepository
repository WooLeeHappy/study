JPA interface의 기능
Repository interface 선언만 해준다면 구현은 Spring data JPA 가 대신 해준다.

엔티티 파일명은 이해하기 쉽게 `Product` 라고 가정한다.

@Entity
public class Product {
		@Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    private Long userId;
    private String title;
    private String image;
    private String link;
    private int lprice;
    private int myprice;
}

// 1. 상품 생성
Product product = new Product(...);
productRepository.save(product);

// 2. 상품 전체 조회
List<Product> products = productRepository.findAll();

// 3. 상품 전체 개수 조회
long count = productRepository.count();

// 4. 상품 삭제
productRepository.delete(product);

기본 사용법


다른 파일에서 Repository부분을 불러와서 사용하기 위해서는 ProductRepository 에서 새로 만들어야 한다.
public interface ProductRepository extents JpaRepository<Product, Long> {
  
  // (1) 회원 ID로 등록된 상품들 조회
  List<Product> findAllByUserId(Long userId);
  
  // (2) 상품명이 title 인 관심상품 1개 조회
  Product findByTitle(String title);
  
  // (3) 상품명에 word가 포함된 모든 상품을 조회
  List<Product> findAllByTitleContaining(String word);
  
  // (4) 최저가가 fromPrice ~ toPrice 인 모든 상품들을 조회
  List<Product> findAllByLpriceBetween(int fromPrice, int toPrice);
  
  
  // (5) 앞에 List<...> 또는 클래스말고 Optional을 사용할 수 있다. 
  // Optional을 사용하게 되면, 존재할수도 있지만 안할 수도 있는 객체, 즉 null이 될 수도 있는 객체를 감싸고 있는 일종의 래퍼 클래스가 된다.
  // 기존엔 객체를 직접 null인지 체크 했지만 optional에 담아서 쓰면 null을 다루기가 좋아진다. 아래는 예시이다.
  Optional<Product> findByTitle(String title);
  
  // 다른 파일에서 Repository 불러오기. (2) 번은 주석처리를 해준다.
  // Product product = ProductRepository.findByTitle("어떤제목").orElseThrow(
  //    () -> new RuntimeException("어떤 제목이 없습니다.")
  // )
  // 이와같이 Null이될지 안될지 알 수 없는경우에는 Optional을 붙여 처리하는것이 좋다. 확실히 있다면 안써도 된다.
  
}



그 외 여러가지가 있으니 Repository에서 해당 코드를 (윈도우기준) Control + 클릭하면 자세한 사용 방법이 나온다.
또는 아래 사이트를 확인해보자
https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods

영어를 잘한다면 ;

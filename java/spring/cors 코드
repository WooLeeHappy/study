WebSecurityConfig

@Bean
public CorsConfigurationSource corsConfigurationSource(){

    CorsConfiguration config = new CorsConfiguration();

    // 서버에서 응답하는 리소스에 접근 가능한 출처를 명시
    // Access-Control-Allow-Origin
    //config.addAllowedOrigin("http://localhost:3000");
    config.addAllowedOrigin("http://charleybucket.s3-website.ap-northeast-2.amazonaws.com"); //요거 변경하시면 됩니다.

    // 특정 헤더를 클라이언트 측에서 꺼내어 사용할 수 있게 지정
    // 만약 지정하지 않는다면, Authorization 헤더 내의 토큰 값을 사용할 수 없음
    // Access-Control-Expose-Headers
    config.addExposedHeader(JwtUtil.AUTHORIZATION_HEADER);

    // 본 요청에 허용할 HTTP method(예비 요청에 대한 응답 헤더에 추가됨)
    // Access-Control-Allow-Methods
    config.addAllowedMethod("*");

    // 본 요청에 허용할 HTTP header(예비 요청에 대한 응답 헤더에 추가됨)
    // Access-Control-Allow-Headers
    config.addAllowedHeader("*");

    // 기본적으로 브라우저에서 인증 관련 정보들을 요청 헤더에 담지 않음
    // 이 설정을 통해서 브라우저에서 인증 관련 정보들을 요청에 담을 수 있도록 해줍니다.
    // Access-Control-Allow-Credentials
    config.setAllowCredentials(true);

    // allowCredentials 를 true로 하였을 때,
    // allowedOrigin의 값이 * (즉, 모두 허용)이 설정될 수 없도록 검증합니다.
    config.validateAllowCredentials();

    // 어떤 경로에 이 설정을 적용할 지 명시합니다. (여기서는 전체 경로)
    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration("/**", config);

    return source;
}

추가로 @Bean 되어있는 SecurityFilterChain에 .cors()를 추가해준다 ( +

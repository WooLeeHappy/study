Interface는 객체의 사용 방법을 정의한 타입이다. 객체의 교환성을 높여주기 때문에 다형성을 구현하는 매우 중요한 역할을 한다.
즉, 개발 코드를 수정하지 않고 사용하는 객체를 변경할 수 있도록 해준다.

인터페이스는 아래와 같은 특징이 있다.

- 정의할 때 키워드 class 대신에 interface를 사용
    - abstract는 생략하는 것이 보통
- 일반적으로 상수와 추상메소드만 들어간다.
- 객체 생성 불가

    
public interface RemoteControl {
  public int MAX_VOLUME = 10;
  public int Min_VOLUME = 0;
  
  public int MAX_VOLUME;  //  컴파일에러, 인터페이스는 필드에서 초기값이 필수이다. 또한 변경이 불가하다.
  
  int method(매개변수,...);  //  
}
  
인터페이스를 설정을 하지 않아도 해당 메서드를 만들고 진행함에 문제는 없다.
다만 협업의 경우에는 달라진다.
인터페이스를 통해 A개발자는 메서드를, B개발자는 해당 메서드를 사용해야하는 업무를 진행하려면 우선 A개발자의 메서드가 먼저 완성이 되야한다.
그러면 B개발자는 A개발자가 끝나기 전까지 진행할 수 없거나, 시간이 지나 완성한 후 약속한대로가 아닌 결과가 나올수 있다.
예를들어 매개변수의 갯수의 차이등 차이가 발생할 수 있다는 것이다.
즉 인터페이스를 먼저 만들어 고정된 필드는 어떤 변수가 있는지, 매개변수는 어떤것을 넣는지 미리 작성하게 된다.
그래서 인터페이스 안에있는 메서드는 뒤에 { } 내부를 작성하지 않는다.
